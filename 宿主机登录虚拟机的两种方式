## 密码登录
这是第一种方式也是最常见的登录方式。就是为ssh设置密码然后宿主机要和虚拟机建立连接的时候通过密码进行验证。
命令一般是 ` ssh -p 10021 root@localhost ` 其中`-p` 用来指定宿主机的端口号(或者说要发起连接的机器的端口号)
这个命令默认是采取密码的方式进行校验的。
## 密钥登录
google ai的回复:
 
好的，很高兴你问这些关于 SSH、公钥/私钥和端口转发的问题。这些都是理解网络连接和安全性的核心概念。让我们逐一解答：

**1. SSH 中的公钥和私钥：定义和概念**

你可以把 SSH 公钥和私钥想象成一把特殊的锁和钥匙，用于安全地验证身份和建立加密连接。

* **私钥 (Private Key):**
    * **定义：** 私钥就像你的 **个人专属钥匙**。  它是一个 **保密的文件** (`noble.id_rsa` 在你的例子中)。
    * **用途：**
        * **身份证明：** 私钥用于 **证明你是你**。当你尝试通过 SSH 连接到服务器时，你需要使用私钥来“签名”一个请求，证明你拥有与服务器上公钥配对的私钥。
        * **解密数据：**  在某些加密场景中，私钥也用于解密用对应公钥加密的数据。 (虽然 SSH 密钥认证的主要用途是身份验证，而不是数据加密，但密钥本身也具有加密能力)
    * **重要性：** **私钥必须绝对保密！**  如果私钥泄露，就相当于你的钥匙被别人复制了，任何人都可以冒充你登录到你的系统。
    * **存储位置：** 私钥应该安全地存储在你的 **客户端机器** 上 (例如你的宿主机)，通常在你的用户目录下的 `.ssh` 文件夹中，并且权限设置为只有你自己可以读取 (例如 `chmod 600 noble.id_rsa`).

* **公钥 (Public Key):**
    * **定义：** 公钥就像一个 **公开的锁**。  它是一个可以 **公开分发的文件** (`noble.id_rsa.pub` 在你的例子中)。
    * **用途：**
        * **验证身份：** 公钥被 **放置在服务器上** (例如你的虚拟系统的 `root/.ssh/authorized_keys` 文件中)。 当你使用私钥尝试登录时，服务器会使用公钥来 **验证你的私钥的签名是否有效**。 如果验证成功，服务器就确信你是拥有对应私钥的合法用户。
        * **加密数据：**  公钥可以用来加密数据，只有拥有对应私钥的人才能解密。 (虽然在 SSH 密钥认证中，公钥主要用于验证身份，但它也具备加密能力)
    * **重要性：** 公钥可以公开分发，因为它本身不能用于冒充身份。 即使公钥泄露，也不会危及你的私钥安全。
    * **存储位置：** 公钥被复制到 **你需要访问的服务器** 的 `authorized_keys` 文件中。  服务器会使用这个文件来存储所有允许通过密钥认证登录的公钥。

**形象的比喻：邮箱和钥匙**

你可以把公钥和私钥想象成邮箱和钥匙：

* **公钥 (Public Key) 就像你的邮箱的锁：**  你可以把你的邮箱锁 (公钥) 公开给任何人 (例如，放在你的网站上)。 任何人都可以使用这个锁 (公钥) 给你的邮箱 (系统) 投递信件 (加密数据或验证请求)。
* **私钥 (Private Key) 就像你的邮箱钥匙：**  只有你拥有邮箱的钥匙 (私钥)。 你可以使用钥匙 (私钥) 打开你的邮箱 (解密数据或完成身份验证)，取出信件。

**你的 `create-img.sh` 脚本和私钥的作用：**

* **`ssh-keygen -f noble.id_rsa -t rsa -N ''`**:  这行命令生成了一个私钥文件 `noble.id_rsa` 和一个公钥文件 `noble.id_rsa.pub`。
* **`cat noble.id_rsa.pub | tee noble/root/.ssh/authorized_keys`**:  这行命令将 **公钥** `noble.id_rsa.pub` 复制到了虚拟系统 `noble` 目录下的 `root/.ssh/authorized_keys` 文件中。

**所以，你的 `create-img.sh` 脚本设置的私钥 (`noble.id_rsa`) 并不是让其他机器 *访问* 被设置了私钥的系统，而是让你 *自己* (拥有 `noble.id_rsa` 私钥的人) 能够 **安全地访问** 你的虚拟系统。**

**更准确地说，是拥有 `noble.id_rsa` 私钥的 *客户端机器* 可以通过 SSH 访问你的虚拟系统。**  私钥是身份验证的关键，它证明了客户端的身份是合法的，因为它拥有与服务器上公钥配对的私钥。

**接下来 由于我们的客户端机器(在我们的例子也就是宿主机)已经有了noble.id.rsa私钥,我们就需要改变我们通过客户端宿主机连接到服务器端虚拟机上的方式,不再通过密码校验的方式而是通过私钥的方式。**

**使用的命令:`ssh -i noble.id_rsa -p 10021 root@localhost`


**2. 端口转发的概念**

端口转发 (Port Forwarding) 就像一个 **电话转接服务** 或者 **接待员**。  它允许你将一个网络端口上的流量 **转发** 到另一个端口，可能是在同一台机器上，也可能是在另一台机器上。

**在你的 QEMU 虚拟机的场景中，端口转发的作用是：**

* **虚拟机网络隔离：**  通常情况下，QEMU 虚拟机运行在一个 **隔离的网络环境** 中。 虚拟机有自己的虚拟网卡和 IP 地址，但这个 IP 地址 **宿主机外部的网络通常无法直接访问**。  虚拟机和宿主机之间，以及虚拟机之间，可以通过虚拟网络通信，但虚拟机默认情况下可能无法直接被宿主机外部的网络访问。
* **宿主机访问虚拟机服务：**  为了让 **宿主机** 能够访问虚拟机内部运行的服务 (例如 SSH 服务)，你需要使用端口转发。
* **QEMU 的端口转发配置：**  在你的 `qemu_kernel_start.sh` 脚本中，你有这样一行：
    ```bash
    -net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22
    ```
    * **`-net user`**:  配置使用 QEMU 的用户模式网络 (user-mode networking)。 这是一种简单的网络模式，它在宿主机和虚拟机之间创建一个 NAT (网络地址转换) 网络。
    * **`host=10.0.2.10`**:  设置虚拟机在 QEMU 虚拟网络中的 IP 地址为 `10.0.2.10`。  这个 IP 地址是虚拟机内部使用的，宿主机通常无法直接通过这个 IP 访问虚拟机。
    * **`hostfwd=tcp:127.0.0.1:10021-:22`**:  **这就是端口转发的配置！**
        * **`tcp`**:  指定转发 TCP 协议的流量。
        * **`127.0.0.1:10021`**:  **宿主机** 监听的地址和端口。  `127.0.0.1` 是宿主机的回环地址 (localhost)，`10021` 是宿主机上你选择的端口号。  这意味着 QEMU 会在宿主机的 `127.0.0.1:10021` 上监听 TCP 连接。
        * **`-:22`**:  **虚拟机** 内部的目标端口。  `22` 是 SSH 服务的默认端口。  `-` 表示虚拟机内部的 IP 地址是自动分配的 (在 user-mode networking 中，通常是 `10.0.2.15`)。

**端口转发的工作流程：**

1. **宿主机发起连接：** 当你从宿主机上使用 `ssh -p 10021 root@localhost` 命令时，你的 SSH 客户端会尝试连接到宿主机的 `127.0.0.1:10021`。
2. **QEMU 接收连接：** QEMU 进程会监听宿主机的 `127.0.0.1:10021` 端口，并接收到这个连接请求。
3. **QEMU 转发连接：**  根据 `hostfwd` 的配置，QEMU 会将接收到的连接 **转发** 到虚拟机内部的 IP 地址 (例如 `10.0.2.15`) 的 22 端口。
4. **虚拟机 SSH 服务响应：** 虚拟机内部运行的 SSH 服务器 (监听在 22 端口) 会接收到转发来的连接请求，并开始 SSH 握手和身份验证过程。
5. **宿主机和虚拟机建立 SSH 连接：**  最终，通过 QEMU 的端口转发，你实际上是在宿主机和虚拟机内部的 SSH 服务之间建立了一个连接。

**形象的比喻：电话转接服务**

你可以把端口转发想象成一个电话转接服务：

* **宿主机端口 (例如 10021) 就像转接服务的电话号码：**  你拨打这个号码 (连接到宿主机端口 10021)。
* **QEMU 就像转接服务：**  它接收你的呼叫 (连接请求)。
* **虚拟机端口 (例如 22) 就像你要找的人的内线分机号：**  转接服务 (QEMU) 会将你的呼叫转接到正确的内线分机号 (虚拟机端口 22)。
* **最终你和你要找的人 (虚拟机 SSH 服务) 建立了通话 (SSH 连接)。**

**3. 宿主机的 IP 地址和端口，以及 SSH 端口**

* **宿主机的每个 IP 地址都可以有端口吗？**
    * **是的！**  一个 IP 地址可以有 **65536 个 TCP 端口** (端口号范围是 0 到 65535) 和 **65536 个 UDP 端口** (端口号范围也是 0 到 65535)。  TCP 和 UDP 是两种不同的网络协议，它们使用独立的端口号空间。
    * **端口号的作用：** 端口号用于区分同一台机器上运行的不同网络应用程序或服务。  你可以把 IP 地址比作一栋大楼的地址，而端口号就像大楼里的不同房间号。  不同的服务 (例如 Web 服务、SSH 服务、邮件服务) 可以监听不同的端口。
    * **回环地址 (127.0.0.1) 的端口：**  即使是回环地址 `127.0.0.1` (localhost)，也拥有完整的 65536 个 TCP 端口和 65536 个 UDP 端口。  你的 QEMU 端口转发配置使用了 `127.0.0.1:10021`，就是使用了回环地址的一个端口。

* **SSH 有多少端口？**
    * **SSH 服务通常监听一个端口：**  默认情况下，SSH 服务器 (sshd) 监听 **TCP 端口 22**。  但这只是默认配置，你可以修改 SSH 服务器的配置文件 (`/etc/ssh/sshd_config`) 来更改监听端口。
    * **SSH 客户端连接的目标端口：**  当你使用 SSH 客户端连接时，你可以通过 `-p` 选项指定要连接的目标端口。 如果你不指定 `-p` 选项，SSH 客户端默认会尝试连接到目标服务器的 22 端口。
    * **SSH 本身没有 "多少端口" 的概念：**  "SSH 有多少端口" 这个问题可能有点误导。  SSH 是一种协议和服务，它通常使用一个或几个端口进行通信。  关键在于 SSH 服务器监听的端口，以及客户端连接时指定的目标端口。

**总结：**

* **公钥和私钥** 是 SSH 密钥认证的核心，私钥用于身份证明，公钥用于验证身份。 私钥必须保密，公钥可以公开分发。
* **端口转发** 允许你从宿主机访问虚拟机内部的服务，通过将宿主机端口的流量转发到虚拟机端口实现。
* **IP 地址和端口** 共同确定网络连接的目标。  每个 IP 地址可以有 65536 个 TCP 端口和 65536 个 UDP 端口。 SSH 服务默认监听 22 端口，但可以配置更改。

希望这些解释能够帮助你更深入地理解 SSH、密钥、端口转发和网络端口的概念！  如果你还有其他问题，随时提出。
